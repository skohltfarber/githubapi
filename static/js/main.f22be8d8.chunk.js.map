{"version":3,"sources":["component/MyPieChart.js","component/Avatar.js","component/GithubApp.js","App.js","serviceWorker.js","index.js"],"names":["MyPieChart","languages","userfullname","title","width","height","chartType","loader","data","options","Avatar","imgSrc","this","props","src","Image","className","alt","roundedCircle","Component","GithubApp","useState","username","setUsername","setLanguages","fetching","setFetching","errormsg","setErrormsg","setUserfullname","avatarsrc","setAvatarsrc","followers","setFollowers","following","setFollowing","myHeaders","Headers","authHeader","btoa","process","append","requestOptions","method","headers","redirect","fetchUser","a","clearUserdetails","fetch","resp","json","undefined","user","name","console","log","avatar_url","fetchUserdetails","userRepositories","length","languageMap","Map","forEach","repo","language","has","set","get","l","push","value","key","type","placeholder","onChange","event","target","Button","variant","color","onClick","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.f22be8d8.chunk.js","sourcesContent":["import React from 'react';\nimport { Chart } from \"react-google-charts\";\n\nconst MyPieChart = ({languages, userfullname}) => {\n\n    const title = `${userfullname}'s preferred Languages`;\n\n    return(\n        <div>\n\n            <Chart\n                width={'600px'}\n                height={'400px'}\n                chartType=\"BarChart\"\n                loader={<div>Loading Chart</div>}\n                data={languages}\n                options={{\n                    title: title,\n                }}\n            />\n\n        </div>\n    );\n}\n\nexport default MyPieChart;","import React, { Component } from 'react';\nimport './Avatar.scss';\nimport Image from 'react-bootstrap/Image';\n\nclass Avatar extends Component {\n\n    render() {\n\n        const imgSrc = this.props.src;\n\n        return(\n            <div>\n                <Image className=\"avatarContainer\" alt=\"userImage\" src={imgSrc} roundedCircle />\n            </div>\n        )\n    }\n}\n\nexport default Avatar;\n","import React, { useState } from 'react';\nimport './GithubApp.scss';\nimport MyPieChart from './MyPieChart';\nimport Button from '@material-ui/core/Button';\nimport Avatar from './Avatar';\n\nconst GithubApp = () => {\n    const [username, setUsername] = useState(\"\");\n    const [languages, setLanguages] = useState([]);\n    const [fetching, setFetching] = useState(false);\n    const [errormsg, setErrormsg] = useState(\"\");\n    const [userfullname, setUserfullname] = useState(\"\");\n    const [avatarsrc, setAvatarsrc] = useState(\"\");\n    const [followers, setFollowers] = useState(0);\n    const [following, setFollowing] = useState(0);\n\n    const myHeaders = new Headers();\n    const authHeader = \"Basic \" + btoa(process.env.REACT_APP_GITHUB_CLIENT_ID + \":\" + process.env.REACT_APP_GITHUB_CLIENT_SECRET);\n    myHeaders.append(\"Authorization\", authHeader);\n\n    const requestOptions = {\n        method: 'GET',\n        headers: myHeaders,\n        redirect: 'follow'\n    };\n\n    const handleChange = (event) => {\n        setUsername(event.target.value);\n    }\n\n    const fetchUser = async () => {\n        setFetching(true);\n\n        // Remove all the entries from the Array. \n        clearUserdetails();\n\n        const resp = await fetch(`https://api.github.com/users/${username}`, requestOptions);\n        const user = await resp.json();\n        if (user.name === undefined || user.name === null) {\n            setErrormsg(\"Not a valid user\");\n            console.log(\"Cleared out Lanuages.\");\n\n        } else {\n            setUserfullname(user.name);\n            setAvatarsrc(user.avatar_url);\n            setFollowers(user.followers);\n            setFollowing(user.following);\n            console.log(user.name);\n\n            fetchUserdetails();\n        }\n\n        setFetching(false);\n    }\n\n    const fetchUserdetails = async () => {\n        setFetching(true);\n        const resp = await fetch(`https://api.github.com/users/${username}/repos`, requestOptions);\n        const userRepositories = await resp.json();\n        if (userRepositories && userRepositories.length > 0) {\n            const languageMap = new Map();\n            userRepositories.forEach((repo) => {\n                if (repo.language) {\n                    if (languageMap.has(repo.language)) {\n                        languageMap.set(repo.language, languageMap.get(repo.language) + 1);\n                    } else {\n                        languageMap.set(repo.language, 1);\n                    }\n                }\n            });\n            setLanguages([]);\n            const l = [];\n            l.push([\"Languages\", \"Count\"]);\n            languageMap.forEach((value, key) => {\n                l.push([key, value]);\n\n            });\n            setLanguages(languages => l);\n        } else {\n            setErrormsg(\"Not a valid user\");\n        }\n        setFetching(false);\n    }\n\n    const clearUserdetails = async () => {\n        setFetching(true);\n        setLanguages([]);\n        setFetching(false);\n    }\n\n    return (\n        <div className=\"container\">\n            <h3>What programming language do they code on Github?</h3>\n            <p>(based on user's contributions)</p>\n            <input\n                type=\"text\"\n                placeholder=\"Enter User's Github username\"\n                value={username}\n                onChange={handleChange}\n            />\n            <Button\n                variant=\"contained\"\n                color=\"primary\"\n                onClick={fetchUser}\n            >\n                Fetch\n            </Button>\n            <div>\n                {errormsg}\n            </div>\n            <div>\n                {languages.length > 0 && !fetching\n                    &&\n                    <div>\n                        <div>\n                            {\n                                avatarsrc &&\n                                <Avatar src={avatarsrc} />\n                            }\n                            {\n                                userfullname &&\n                                <span><br />{userfullname}</span>\n                            }\n                            {\n                                followers &&\n                                <p>Followers: {followers}</p>\n                            }\n                            {\n                                following &&\n                                <p>Following {following}</p>\n                            }\n                        </div>\n                        <MyPieChart languages={languages} userfullname={userfullname} />\n                    </div>\n                }\n            </div>\n\n        </div>\n    )\n};\n\nexport default GithubApp;\n","import React from 'react';\nimport './App.css';\nimport GithubApp from './component/GithubApp';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <GithubApp />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}